<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0042)https://pypi.python.org/pypi/paho-mqtt/1.1 -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      
      
      <title>paho-mqtt 1.1 : Python Package Index</title>
      <meta content="">
      <meta content="MQTT version 3.1/3.1.1 client class">
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 latest updates" href="https://pypi.python.org/pypi?:action=rss">
       <link rel="alternate" type="application/rss+xml" title="RSS: 40 newest packages" href="https://pypi.python.org/pypi?:action=packages_rss">
       <link rel="stylesheet" media="screen" href="./paho-mqtt 1.1 _ Python Package Index_files/screen-switcher-default.css" type="text/css">
       <link media="screen" href="./paho-mqtt 1.1 _ Python Package Index_files/netscape4.css" type="text/css" rel="stylesheet">
       <link media="print" href="./paho-mqtt 1.1 _ Python Package Index_files/print.css" type="text/css" rel="stylesheet">
       <link media="screen" href="./paho-mqtt 1.1 _ Python Package Index_files/largestyles.css" type="text/css" rel="alternate stylesheet" title="large text">
       <link media="screen" href="./paho-mqtt 1.1 _ Python Package Index_files/defaultfonts.css" type="text/css" rel="alternate stylesheet" title="default fonts">
       <link rel="stylesheet" media="screen" href="./paho-mqtt 1.1 _ Python Package Index_files/docutils.css" type="text/css">
       <link rel="stylesheet" media="screen" href="./paho-mqtt 1.1 _ Python Package Index_files/pygments.css" type="text/css">

       <!-- allow pypi to override the standard pydotorg/docutils/etc. styles -->
       <link rel="stylesheet" href="./paho-mqtt 1.1 _ Python Package Index_files/pypi.css" type="text/css">
       <link media="screen" rel="stylesheet" href="./paho-mqtt 1.1 _ Python Package Index_files/pypi-screen.css" type="text/css">

       
       <meta name="google-site-verification" content="NSgF04qslVV4P7nymxJDSkWVK09zfdPTxgZfU3dNSoQ">
       

       
 
 <meta name="description" content="MQTT version 3.1/3.1.1 client class">
 <link rel="meta" title="DOAP" type="application/rdf+xml" href="https://pypi.python.org/pypi?:action=doap&amp;name=paho-mqtt&amp;version=1.1">
 <style type="text/css">
  table.form th {white-space: pre;}
 </style>


       <style type="text/css">
       </style>
    <style type="text/css" abt="234"></style><script>//console.log('a')
</script><script>doAdblock();
function doAdblock(){
    (function() {
        function A() {}
        A.prototype = {
            rules: {
                'pps_pps': {
                    'find': /^http:\/\/www\.iqiyi\.com\/player\/cupid\/common\/pps_flvplay_s\.swf/,
                    'replace': 'http://swf.adtchrome.com/pps_20140420.swf'
                },
                '17173_in':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFile(Customer)?\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_in_20150522.swf"
                },
                '17173_out':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/PreloaderFileFirstpage\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_out_20150522.swf"
                },
                '17173_live':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream(_firstpage)?\.swf/,
                    'replace':"http://swf.adtchrome.com/17173_stream_20150522.swf"
                },
                '17173_live_out':{
                    'find':/http:\/\/f\.v\.17173cdn\.com\/(\d+\/)?flash\/Player_stream_(custom)?Out\.swf/,
                    'replace':"http://swf.adtchrome.com/17173.out.Live.swf"
                }
            },
            _done: null,
            get done() {
                if(!this._done) {
                    this._done = new Array();
                }
                return this._done;
            },
            addAnimations: function() {
                var style = document.createElement('style');
                style.type = 'text/css';
                style.innerHTML = 'object,embed{\
                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;\
                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;\
                -o-animation-duration:.001s;-o-animation-name:playerInserted;\
                animation-duration:.001s;animation-name:playerInserted;}\
                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}\
                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}';
                document.getElementsByTagName('head')[0].appendChild(style);
            },
            animationsHandler: function(e) {
                if(e.animationName === 'playerInserted') {
                    this.replace(e.target);
                }
            },
            replace: function(elem) {
                if (/http:\/\/v.youku.com\/v_show\/.*/.test(window.location.href)){
                    var tag = document.getElementById("playerBox").getAttribute("player")
                    if (tag == "adt"){
                        console.log("adt adv")
                        return;
                    }
                }
                if(this.done.indexOf(elem) != -1) return;
                this.done.push(elem);
                var player = elem.data || elem.src;
                if(!player) return;
                var i, find, replace = false;
                for(i in this.rules) {
                    find = this.rules[i]['find'];
                    if(find.test(player)) {
                        replace = this.rules[i]['replace'];
                        if('function' === typeof this.rules[i]['preHandle']) {
                            this.rules[i]['preHandle'].bind(this, elem, find, replace, player)();
                        }else{
                            this.reallyReplace.bind(this, elem, find, replace)();
                        }
                        break;
                    }
                }
            },
            reallyReplace: function(elem, find, replace) {
                elem.data && (elem.data = elem.data.replace(find, replace)) || elem.src && ((elem.src = elem.src.replace(find, replace)) && (elem.style.display = 'block'));
                var b = elem.querySelector("param[name='movie']");
                this.reloadPlugin(elem);
            },
            reloadPlugin: function(elem) {
                var nextSibling = elem.nextSibling;
                var parentNode = elem.parentNode;
                parentNode.removeChild(elem);
                var newElem = elem.cloneNode(true);
                this.done.push(newElem);
                if(nextSibling) {
                    parentNode.insertBefore(newElem, nextSibling);
                } else {
                    parentNode.appendChild(newElem);
                }
            },
            init: function() {
                var handler = this.animationsHandler.bind(this);
                document.body.addEventListener('webkitAnimationStart', handler, false);
                document.body.addEventListener('msAnimationStart', handler, false);
                document.body.addEventListener('oAnimationStart', handler, false);
                document.body.addEventListener('animationstart', handler, false);
                this.addAnimations();
            }
        };
        new A().init();
    })();
}
// 20140730
(function cnbeta() {
    if (document.URL.indexOf('cnbeta.com') >= 0) {
        var elms = document.body.querySelectorAll("p>embed");
        Array.prototype.forEach.call(elms, function(elm) {
            elm.style.marginLeft = "0px";
        });
    }
})();
//baidu
if(document.URL.indexOf('www.baidu.com') >= 0){
    if(document && document.getElementsByTagName && document.getElementById && document.body){
        var aa = function(){
            var all = document.body.querySelectorAll("#content_left div,#content_left table");
            for(var i = 0; i < all.length; i++){
                if(/display:\s?(table|block)\s!important/.test(all[i].getAttribute("style"))){all[i].style.display= "none";all[i].style.visibility='hidden';}
            }
            all = document.body.querySelectorAll('.result.c-container[id="1"]');
            if(all.length == 1) return;
            for(var i = 0; i < all.length; i++){
                var dataClick = all[i].getAttribute('data-click');
                if(dataClick.indexOf('rsv_cd')>-1) continue;
                all[i].style.display= "none";all[i].style.visibility='hidden';
            }
        }
        aa();
        document.getElementById('wrapper_wrapper').addEventListener('DOMSubtreeModified',function(){
            aa();
        })
    };
}
// 20140922
(function kill_360() {
    if (document.URL.indexOf('so.com') >= 0) {
        document.getElementById("e_idea_pp").style.display = none;
    }
})();
if (document.URL.indexOf("tv.sohu.com") >= 0){
    if (document.cookie.indexOf("fee_status=true")==-1){document.cookie='fee_status=true'};
}
if (document.URL.indexOf("56.com") >= 0){
    if (document.cookie.indexOf("fee_status=true")==-1){document.cookie='fee_status=true'};
}
if (document.URL.indexOf("iqiyi.com") >= 0){
    if (document.cookie.indexOf("player_forcedType=h5_VOD")==-1){
        document.cookie='player_forcedType=h5_VOD'
        if(localStorage.reloadTime && Date.now() - parseInt(localStorage.reloadTime)<60000){
            console.log('no reload')
        }else{
            location.reload()
            localStorage.reloadTime = Date.now();
        }
    }
}
</script><style type="text/css">object,embed{                -webkit-animation-duration:.001s;-webkit-animation-name:playerInserted;                -ms-animation-duration:.001s;-ms-animation-name:playerInserted;                -o-animation-duration:.001s;-o-animation-name:playerInserted;                animation-duration:.001s;animation-name:playerInserted;}                @-webkit-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @-ms-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @-o-keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}                @keyframes playerInserted{from{opacity:0.99;}to{opacity:1;}}</style></head>
    <body>
     

      <!--  Logo  -->
      <h1 id="logoheader">
       <a accesskey="1" href="http://www.python.org/" id="logolink">
          <img src="./paho-mqtt 1.1 _ Python Package Index_files/python-logo.png" alt="homepage" border="0" id="logo">
       </a>
      </h1>
      <!--  Skip to Navigation  -->
      <div class="skiptonav"><a accesskey="2" href="https://pypi.python.org/pypi/paho-mqtt/1.1#left-hand-navigation"><img src="./paho-mqtt 1.1 _ Python Package Index_files/trans.gif" alt="skip to navigation" border="0" id="skiptonav"></a></div>
      <div class="skiptonav"><a accesskey="3" href="https://pypi.python.org/pypi/paho-mqtt/1.1#content-body"><img src="./paho-mqtt 1.1 _ Python Package Index_files/trans.gif" alt="skip to content" border="0" id="skiptocontent"></a></div>
      <!--  Utility Menu  -->

      <div id="utility-menu">
        <!--  Search Box  -->
        <div id="searchbox">
          <form id="searchform" method="get" name="searchform" action="https://pypi.python.org/pypi">
            <input type="hidden" name=":action" value="search">
            <div id="search">
              <input class="input-text" id="term" name="term" autofocus="autofocus">
              <input class="input-button" type="submit" name="submit" value="search" id="submit">
            </div>
          </form>
        </div>
<!-- XXX: reinstate this       <div id="screen-switcher"></div> -->
      </div>
      <div id="left-hand-navigation">

        <!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER -->
        <div id="menu">
          <ul class="level-one">
            <li class="selected">
              <a class="selected" href="https://pypi.python.org/pypi">Package Index</a>

              <ul class="level-two">

                
                  <li class=""><a class="" href="https://pypi.python.org/pypi?%3Aaction=browse">Browse&nbsp;packages</a></li>
                
                
                  <li class=""><a class="" href="https://pypi.python.org/pypi?%3Aaction=list_classifiers">List&nbsp;trove&nbsp;classifiers</a></li>
                
                
                  <li class=""><a class="" href="https://pypi.python.org/pypi?%3Aaction=rss">RSS&nbsp;(latest&nbsp;40&nbsp;updates)</a></li>
                
                
                  <li class=""><a class="" href="https://pypi.python.org/pypi?%3Aaction=packages_rss">RSS&nbsp;(newest&nbsp;40&nbsp;packages)</a></li>
                
        <li><a href="https://pypi.python.org/tos">Terms of Service</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopTutorial">PyPI Tutorial</a></li>
        <li><a href="https://pypi.python.org/security">PyPI Security</a></li>
        <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513504">PyPI Support</a></li>
        <li><a href="https://github.com/pypa/pypi-legacy/issues">PyPI Bug Reports</a></li>
        <li><a href="http://www.python.org/sigs/distutils-sig/">PyPI Discussion</a></li>
        <li><a href="http://wiki.python.org/moin/CheeseShopDev">PyPI Developer Info</a></li>
       </ul>

            </li>




            <li class=""><a href="http://www.python.org/about" class="" title="About The Python Language">About</a>
            </li><li class=""><a href="http://www.python.org/news" class="" title="">News</a>
            </li><li class=""><a href="http://www.python.org/doc" class="" title="">Documentation</a>
            </li><li class=""><a href="http://www.python.org/download" title="">Download</a>


            </li><li class=""><a href="http://www.python.org/community" class="" title="">Community</a>
            </li><li class=""><a href="http://www.python.org/psf" class="" title="Python Software Foundation">Foundation</a>
            </li><li class=""><a href="http://www.python.org/dev" class="" title="Python Core Language Development">Core Development</a>
          </li>
          </ul>
        </div>

      </div>
      <div id="content-body">
        <div id="body-main">
          <div id="content">

            <div id="breadcrumb">
              <a href="https://pypi.python.org/pypi">Package Index</a>
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="https://pypi.python.org/pypi/paho-mqtt">paho-mqtt</a>
              
              
                <span class="breadcrumb-separator">&gt;</span>
                <a href="https://pypi.python.org/pypi/paho-mqtt/1.1">1.1</a>
              

            </div>

            <div id="document-floating">

            <div id="document-navigation" style="overflow-y: auto; max-height: 15em; overflow-x: hidden;">
		
                  <h4>Not Logged In</h4>

                  <ul>
		    
                    <li><a href="https://pypi.python.org/pypi?%3Aaction=login_form">Login</a></li>
                    <li><a href="https://pypi.python.org/pypi?%3Aaction=register_form">Register</a></li>
                    <li><a href="https://pypi.python.org/pypi?%3Aaction=forgotten_password_form">Lost Login?</a></li>
		    <li><a href="https://pypi.python.org/openid_login">Login with OpenID</a>
                      
                        <a style="border: none;" href="https://pypi.python.org/openid_login?provider=Launchpad"><img width="16" height="16" alt="Launchpad" src="./paho-mqtt 1.1 _ Python Package Index_files/launchpad.png" title="Launchpad"></a>
                      
                    </li>
                    <li><a href="https://pypi.python.org/google_login">Login with Google<img width="16" height="16" src="./paho-mqtt 1.1 _ Python Package Index_files/favicon.ico" title="Google Login" alt="Google Login"></a></li>
                  </ul>

		

		

                <div id="statusdiv"><br><h4 id="statusbox">Status</h4>
<li><a href="http://status.python.org/">Nothing to report</a></li></div>
            </div>
        </div>
        


            <div class="section">
              <h1>paho-mqtt 1.1</h1>

              
<div id="download-button">
 
  <a class="button green" style="float:right;" href="https://pypi.python.org/packages/83/96/dacc2b78bc9c5cd83eed178e9ce35d7bceecf2dd38db079c0190423efd4a/paho-mqtt-1.1.tar.gz">Download<br>
    <span style="font-size: 75%">paho-mqtt-1.1.tar.gz</span>
  </a>
 
 
</div>

<p style="font-style: italic">MQTT version 3.1/3.1.1 client class</p>



<p>
<strong>Latest Version: </strong><a title="Latest Version URL" href="https://pypi.python.org/pypi/paho-mqtt/1.3.0">
<span>1.3.0</span>
</a>
</p>




<p>This document describes the source code for the <a href="http://eclipse.org/paho/" rel="nofollow">Eclipse Paho</a> MQTT Python client library, which implements versions 3.1 and 3.1.1 of the MQTT protocol.</p>
<p>This code provides a client class which enable applications to connect to an <a href="http://mqtt.org/" rel="nofollow">MQTT</a> broker to publish messages, and to subscribe to topics and receive published messages. It also provides some helper functions to make publishing one off messages to an MQTT server very straightforward.</p>
<p>It supports Python 2.7 or 3.x, with limited support for Python 2.6.</p>
<p>The MQTT protocol is a machine-to-machine (M2M)/”Internet of Things” connectivity protocol. Designed as an extremely lightweight publish/subscribe messaging transport, it is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.</p>
<p>Paho is an <a href="https://www.eclipse.org/org/foundation/" rel="nofollow">Eclipse Foundation</a> project.</p>
<div id="contents">
<h2>Contents</h2>
<ul>
<li><p><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#installation" rel="nofollow">Installation</a></p>
</li>
<li><dl>
<dt><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#usage-and-api" rel="nofollow">Usage and API</a></dt>
<dd><ul>
<li><dl>
<dt><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#client" rel="nofollow">Client</a></dt>
<dd><ul>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#constructor-reinitialise" rel="nofollow">Constructor / reinitialise</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#option-functions" rel="nofollow">Option functions</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#connect-reconnect-disconnect" rel="nofollow">Connect / reconnect / disconnect</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#network-loop" rel="nofollow">Network loop</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#publishing" rel="nofollow">Publishing</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#subscribe-unsubscribe" rel="nofollow">Subscribe / Unsubscribe</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#callbacks" rel="nofollow">Callbacks</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#external-event-loop-support" rel="nofollow">External event loop support</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#global-helper-functions" rel="nofollow">Global helper functions</a></li>
</ul>
</dd>
</dl>
</li>
<li><dl>
<dt><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#id17" rel="nofollow">Publish</a></dt>
<dd><ul>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#single" rel="nofollow">Single</a></li>
<li><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#multiple" rel="nofollow">Multiple</a></li>
</ul>
</dd>
</dl>
</li>
</ul>
</dd>
</dl>
</li>
<li><p><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#reporting-bugs" rel="nofollow">Reporting bugs</a></p>
</li>
<li><p><a href="https://pypi.python.org/pypi/paho-mqtt/1.1#more-information" rel="nofollow">More information</a></p>
</li>
</ul>
</div>
<div id="installation">
<h2>Installation</h2>
<p>The latest stable version is available in the Python Package Index (PyPi) and can be installed using</p>
<pre>pip install paho-mqtt
</pre>
<p>Or with <tt>virtualenv</tt>:</p>
<pre>virtualenv paho-mqtt
source paho-mqtt/bin/activate
pip install paho-mqtt
</pre>
<p>To obtain the full code, including examples and tests, you can clone the git repository:</p>
<pre>git clone git://git.eclipse.org/gitroot/paho/org.eclipse.paho.mqtt.python.git
</pre>
<p>Once you have the code, it can be installed from your repository as well:</p>
<pre>cd org.eclipse.paho.mqtt.python
python setup.py install
</pre>
</div>
<div id="usage-and-api">
<h2>Usage and API</h2>
<p>Detailed API documentation is available through <strong>pydoc</strong>. Samples are available in the <strong>examples</strong> directory.</p>
<p>The package provides two modules, a full client and a helper for simple publishing.</p>
<div id="getting-started">
<h3>Getting Started</h3>
<p>Here is a very simple example that subscribes to the broker $SYS topic tree and prints out the resulting messages:</p>
<pre>import paho.mqtt.client as mqtt

# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print("Connected with result code "+str(rc))

    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe("$SYS/#")

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload))

client = mqtt.Client()
client.on_connect = on_connect
client.on_message = on_message

client.connect("iot.eclipse.org", 1883, 60)

# Blocking call that processes network traffic, dispatches callbacks and
# handles reconnecting.
# Other loop*() functions are available that give a threaded interface and a
# manual interface.
client.loop_forever()
</pre>
</div>
<div id="client">
<h3>Client</h3>
<p>You can use the client class as an instance, within a class or by subclassing. The general usage flow is as follows:</p>
<ul>
<li>Create a client instance</li>
<li>Connect to a broker using one of the <tt><span class="pre">connect*()</span></tt> functions</li>
<li>Call one of the <tt><span class="pre">loop*()</span></tt> functions to maintain network traffic flow with the broker</li>
<li>Use <tt>subscribe()</tt> to subscribe to a topic and receive messages</li>
<li>Use <tt>publish()</tt> to publish messages to the broker</li>
<li>Use <tt>disconnect()</tt> to disconnect from the broker</li>
</ul>
<p>Callbacks will be called to allow the application to process events as necessary. These callbacks are described below.</p>
<div id="constructor-reinitialise">
<h4>Constructor / reinitialise</h4>
<div id="id1">
<h5>Client()</h5>
<pre>Client(client_id="", clean_session=True, userdata=None, protocol=MQTTv311)
</pre>
<p>The <tt>Client()</tt> constructor takes the following arguments:</p>
<dl>
<dt>client_id</dt>
<dd>the unique client id string used when connecting to the broker. If <tt>client_id</tt> is zero length or <tt>None</tt>, then one will be randomly generated. In this case the <tt>clean_session</tt> parameter must be <tt>True</tt>.</dd>
<dt>clean_session</dt>
<dd><p>a boolean that determines the client type. If <tt>True</tt>, the broker will remove all information about this client when it disconnects. If <tt>False</tt>, the client is a durable client and subscription information and queued messages will be retained when the client disconnects.</p>
<p>Note that a client will never discard its own outgoing messages on disconnect. Calling connect() or reconnect() will cause the messages to be resent. Use reinitialise() to reset a client to its original state.</p>
</dd>
<dt>userdata</dt>
<dd>user defined data of any type that is passed as the <tt>userdata</tt> parameter to callbacks. It may be updated at a later point with the <tt>user_data_set()</tt> function.</dd>
<dt>protocol</dt>
<dd>the version of the MQTT protocol to use for this client. Can be either <tt>MQTTv31</tt> or <tt>MQTTv311</tt></dd>
</dl>
<div id="example">
<h6>Example</h6>
<pre>import paho.mqtt.client as mqtt

mqttc = mqtt.Client()
</pre>
</div>
</div>
<div id="reinitialise">
<h5>reinitialise()</h5>
<pre>reinitialise(client_id="", clean_session=True, userdata=None)
</pre>
<p>The <tt>reinitialise()</tt> function resets the client to its starting state as if it had just been created. It takes the same arguments as the <tt>Client()</tt> constructor.</p>
<div id="id2">
<h6>Example</h6>
<pre>mqttc.reinitialise()
</pre>
</div>
</div>
</div>
<div id="option-functions">
<h4>Option functions</h4>
<p>These functions represent options that can be set on the client to modify its behaviour. In the majority of cases this must be done <em>before</em> connecting to a broker.</p>
<div id="max-inflight-messages-set">
<h5>max_inflight_messages_set()</h5>
<pre>max_inflight_messages_set(self, inflight)
</pre>
<p>Set the maximum number of messages with QoS&gt;0 that can be part way through their network flow at once.</p>
<p>Defaults to 20. Increasing this value will consume more memory but can increase throughput.</p>
</div>
<div id="message-retry-set">
<h5>message_retry_set()</h5>
<dl>
<dt>::</dt>
<dd>message_retry_set(retry)</dd>
</dl>
<p>Set the time in seconds before a message with QoS&gt;0 is retried, if the broker does not respond.</p>
<p>This is set to 5 seconds by default and should not normally need changing.</p>
</div>
<div id="tls-set">
<h5>tls_set()</h5>
<pre>tls_set(ca_certs, certfile=None, keyfile=None, cert_reqs=ssl.CERT_REQUIRED,
    tls_version=ssl.PROTOCOL_TLSv1, ciphers=None)
</pre>
<p>Configure network encryption and authentication options. Enables SSL/TLS support.</p>
<dl>
<dt>ca_certs</dt>
<dd>a string path to the Certificate Authority certificate files that are to be treated as trusted by this client. If this is the only option given then the client will operate in a similar manner to a web browser. That is to say it will require the broker to have a certificate signed by the Certificate Authorities in <tt>ca_certs</tt> and will communicate using TLS v1, but will not attempt any form of authentication. This provides basic network encryption but may not be sufficient depending on how the broker is configured.</dd>
<dt>certfile, keyfile</dt>
<dd>strings pointing to the PEM encoded client certificate and private keys respectively. If these arguments are not <tt>None</tt> then they will be used as client information for TLS based authentication. Support for this feature is broker dependent. Note that if either of these files in encrypted and needs a password to decrypt it, Python will ask for the password at the command line. It is not currently possible to define a callback to provide the password.</dd>
<dt>cert_reqs</dt>
<dd>defines the certificate requirements that the client imposes on the broker. By default this is <tt>ssl.CERT_REQUIRED</tt>, which means that the broker must provide a certificate. See the ssl pydoc for more information on this parameter.</dd>
<dt>tls_version</dt>
<dd>specifies the version of the SSL/TLS protocol to be used. By default TLS v1 is used. Previous versions (all versions beginning with SSL) are possible but not recommended due to possible security problems.</dd>
<dt>ciphers</dt>
<dd>a string specifying which encryption ciphers are allowable for this connection, or <tt>None</tt> to use the defaults. See the ssl pydoc for more information.</dd>
</dl>
<p>Must be called before <tt><span class="pre">connect*()</span></tt>.</p>
</div>
<div id="tls-insecure-set">
<h5>tls_insecure_set()</h5>
<pre>tls_insecure_set(value)
</pre>
<p>Configure verification of the server hostname in the server certificate.</p>
<p>If <tt>value</tt> is set to <tt>True</tt>, it is impossible to guarantee that the host you are connecting to is not impersonating your server. This can be useful in initial server testing, but makes it possible for a malicious third party to impersonate your server through DNS spoofing, for example.</p>
<p>Do not use this function in a real system. Setting value to True means there is no point using encryption.</p>
<p>Must be called before <tt>connect*)</tt>.</p>
</div>
<div id="username-pw-set">
<h5>username_pw_set()</h5>
<pre>username_pw_set(username, password=None)
</pre>
<p>Set a username and optionally a password for broker authentication. Must be called before <tt><span class="pre">connect*()</span></tt>.</p>
</div>
<div id="user-data-set">
<h5>user_data_set()</h5>
<dl>
<dt>::</dt>
<dd>user_data_set(userdata)</dd>
</dl>
<p>Set the private user data that will be passed to callbacks when events are generated. Use this for your own purpose to support your application.</p>
</div>
<div id="will-set">
<h5>will_set()</h5>
<dl>
<dt>::</dt>
<dd>will_set(topic, payload=None, qos=0, retain=False)</dd>
</dl>
<p>Set a Will to be sent to the broker. If the client disconnects without calling <tt>disconnect()</tt>, the broker will publish the message on its behalf.</p>
<dl>
<dt>topic</dt>
<dd>the topic that the will message should be published on.</dd>
<dt>payload</dt>
<dd>the message to send as a will. If not given, or set to <tt>None</tt> a zero length message will be used as the will. Passing an int or float will result in the payload being converted to a string representing that number. If you wish to send a true int/float, use <tt>struct.pack()</tt> to create the payload you require.</dd>
<dt>qos</dt>
<dd>the quality of service level to use for the will.</dd>
<dt>retain</dt>
<dd>if set to <tt>True</tt>, the will message will be set as the “last known good”/retained message for the topic.</dd>
</dl>
<p>Raises a <tt>ValueError</tt> if <tt>qos</tt> is not 0, 1 or 2, or if <tt>topic</tt> is <tt>None</tt> or has zero string length.</p>
</div>
</div>
<div id="connect-reconnect-disconnect">
<h4>Connect / reconnect / disconnect</h4>
<div id="connect">
<h5>connect()</h5>
<pre>connect(host, port=1883, keepalive=60, bind_address="")
</pre>
<p>The <tt>connect()</tt> function connects the client to a broker. This is a blocking function. It takes the following arguments:</p>
<dl>
<dt>host</dt>
<dd>the hostname or IP address of the remote broker</dd>
<dt>port</dt>
<dd>the network port of the server host to connect to. Defaults to 1883. Note that the default port for MQTT over SSL/TLS is 8883 so if you are using <tt>tls_set()</tt> the port may need providing manually</dd>
<dt>keepalive</dt>
<dd>maximum period in seconds allowed between communications with the broker. If no other messages are being exchanged, this controls the rate at which the client will send ping messages to the broker</dd>
<dt>bind_address</dt>
<dd>the IP address of a local network interface to bind this client to, assuming multiple interfaces exist</dd>
</dl>
<div id="callback">
<h6>Callback</h6>
<p>When the client receives a CONNACK message from the broker in response to the connect it generates an <tt>on_connect()</tt> callback.</p>
</div>
<div id="id3">
<h6>Example</h6>
<pre>mqttc.connect("iot.eclipse.org")
</pre>
</div>
</div>
<div id="connect-async">
<h5>connect_async()</h5>
<pre>connect_async(host, port=1883, keepalive=60, bind_address="")
</pre>
<p>Identical to <tt>connect()</tt>, but non-blocking. The connection will not complete until one of the <tt><span class="pre">loop*()</span></tt> functions is called.</p>
<div id="id4">
<h6>Callback</h6>
<p>When the client receives a CONNACK message from the broker in response to the connect it generates an <tt>on_connect()</tt> callback.</p>
</div>
</div>
<div id="connect-srv">
<h5>connect_srv()</h5>
<pre>connect_srv(domain, keepalive=60, bind_address="")
</pre>
<p>Connect to a broker using an SRV DNS lookup to obtain the broker address. Takes the following arguments:</p>
<dl>
<dt>domain</dt>
<dd>the DNS domain to search for SRV records. If <tt>None</tt>, try to determine the local domain name.</dd>
</dl>
<p>See <tt>connect()</tt> for a description of the <tt>keepalive</tt> and <tt>bind_address</tt> arguments.</p>
<div id="id5">
<h6>Callback</h6>
<p>When the client receives a CONNACK message from the broker in response to the connect it generates an <tt>on_connect()</tt> callback.</p>
</div>
<div id="id6">
<h6>Example</h6>
<pre>mqttc.connect_srv("eclipse.org")
</pre>
</div>
</div>
<div id="reconnect">
<h5>reconnect()</h5>
<pre>reconnect()
</pre>
<p>Reconnect to a broker using the previously provided details. You must have called <tt><span class="pre">connect*()</span></tt> before calling this function.</p>
<div id="id7">
<h6>Callback</h6>
<p>When the client receives a CONNACK message from the broker in response to the connect it generates an <tt>on_connect()</tt> callback.</p>
</div>
</div>
<div id="disconnect">
<h5>disconnect()</h5>
<pre>disconnect()
</pre>
<p>Disconnect from the broker cleanly. Using <tt>disconnect()</tt> will not result in a will message being sent by the broker.</p>
<div id="id8">
<h6>Callback</h6>
<p>When the client has sent the disconnect message it generates an <tt>on_disconnect()</tt> callback.</p>
</div>
</div>
</div>
<div id="network-loop">
<h4>Network loop</h4>
<p>These functions are the driving force behind the client. If they are not called, incoming network data will not be processed and outgoing network data may not be sent in a timely fashion. There are four options for managing the network loop. Three are described here, the fourth in “External event loop support” below. Do not mix the different loop functions.</p>
<div id="loop">
<h5>loop()</h5>
<pre>loop(timeout=1.0, max_packets=1)
</pre>
<p>Call regularly to process network events. This call waits in <tt>select()</tt> until the network socket is available for reading or writing, if appropriate, then handles the incoming/outgoing data. This function blocks for up to <tt>timeout</tt> seconds. <tt>timeout</tt> must not exceed the <tt>keepalive</tt> value for the client or your client will be regularly disconnected by the broker.</p>
<p>The <tt>max_packets</tt> argument is obsolete and should be left unset.</p>
<div id="id9">
<h6>Example</h6>
<pre>run = True
while run:
    mqttc.loop()
</pre>
</div>
</div>
<div id="loop-start-loop-stop">
<h5>loop_start() / loop_stop()</h5>
<pre>loop_start()
loop_stop(force=False)
</pre>
<p>These functions implement a threaded interface to the network loop. Calling <tt>loop_start()</tt> once, before or after <tt><span class="pre">connect*()</span></tt>, runs a thread in the background to call <tt>loop()</tt> automatically. This frees up the main thread for other work that may be blocking. This call also handles reconnecting to the broker. Call <tt>loop_stop()</tt> to stop the background thread. The <tt>force</tt> argument is currently ignored.</p>
<div id="id10">
<h6>Example</h6>
<pre>mqttc.connect("iot.eclipse.org")
mqttc.loop_start()

while True:
    temperature = sensor.blocking_read()
    mqttc.publish("paho/temperature", temperature)
</pre>
</div>
</div>
<div id="loop-forever">
<h5>loop_forever()</h5>
<pre>loop_forever(timeout=1.0, max_packets=1, retry_first_connection=False)
</pre>
<p>This is a blocking form of the network loop and will not return until the client calls <tt>disconnect()</tt>. It automatically handles reconnecting.</p>
<p>Except for the first connection attempt when using connect_async, use <tt>retry_first_connection=True</tt> to make it retry the first connection.  Warning: This might lead to situations where the client keeps connecting to an non existing host without failing.</p>
<p>The <tt>timeout</tt> and <tt>max_packets</tt> arguments are obsolete and should be left unset.</p>
</div>
</div>
<div id="publishing">
<h4>Publishing</h4>
<p>Send a message from the client to the broker.</p>
<div id="publish">
<h5>publish()</h5>
<pre>publish(topic, payload=None, qos=0, retain=False)
</pre>
<p>This causes a message to be sent to the broker and subsequently from the broker to any clients subscribing to matching topics. It takes the following arguments:</p>
<dl>
<dt>topic</dt>
<dd>the topic that the message should be published on</dd>
<dt>payload</dt>
<dd>the actual message to send. If not given, or set to <tt>None</tt> a zero length message will be used. Passing an int or float will result in the payload being converted to a string representing that number. If you wish to send a true int/float, use <tt>struct.pack()</tt> to create the payload you require</dd>
<dt>qos</dt>
<dd>the quality of service level to use</dd>
<dt>retain</dt>
<dd>if set to <tt>True</tt>, the message will be set as the “last known good”/retained message for the topic.</dd>
</dl>
<p>Returns a tuple <tt>(result, mid)</tt>, where result is <tt>MQTT_ERR_SUCCESS</tt> to indicate success or <tt>MQTT_ERR_NO_CONN</tt> if the client is not currently connected. <tt>mid</tt> is the message ID for the publish request. The mid value can be used to track the publish request by checking against the mid argument in the <tt>on_publish()</tt> callback if it is defined.</p>
<p>A <tt>ValueError</tt> will be raised if topic is <tt>None</tt>, has zero length or is invalid (contains a wildcard), if <tt>qos</tt> is not one of 0, 1 or 2, or if the length of the payload is greater than 268435455 bytes.</p>
<div id="id11">
<h6>Callback</h6>
<p>When the message has been sent to the broker an <tt>on_publish()</tt> callback will be generated.</p>
</div>
</div>
</div>
<div id="subscribe-unsubscribe">
<h4>Subscribe / Unsubscribe</h4>
<div id="subscribe">
<h5>subscribe()</h5>
<pre>subscribe(topic, qos=0)
</pre>
<p>Subscribe the client to one or more topics.</p>
<p>This function may be called in three different ways:</p>
<div id="simple-string-and-integer">
<h6>Simple string and integer</h6>
<p>e.g. <tt><span class="pre">subscribe("my/topic",</span> 2)</tt></p>
<dl>
<dt>topic</dt>
<dd>a string specifying the subscription topic to subscribe to.</dd>
<dt>qos</dt>
<dd>the desired quality of service level for the subscription. Defaults to 0.</dd>
</dl>
</div>
<div id="string-and-integer-tuple">
<h6>String and integer tuple</h6>
<p>e.g. <tt><span class="pre">subscribe(("my/topic",</span> 1))</tt></p>
<dl>
<dt>topic</dt>
<dd>a tuple of <tt>(topic, qos)</tt>. Both topic and qos must be present in the tuple.</dd>
<dt>qos</dt>
<dd>not used.</dd>
</dl>
</div>
<div id="list-of-string-and-integer-tuples">
<h6>List of string and integer tuples</h6>
<p>e.g. <tt><span class="pre">subscribe([("my/topic",</span> 0), ("another/topic", <span class="pre">2)])</span></tt></p>
<p>This allows multiple topic subscriptions in a single SUBSCRIPTION command, which is more efficient than using multiple calls to <tt>subscribe()</tt>.</p>
<dl>
<dt>topic</dt>
<dd>a list of tuple of format <tt>(topic, qos)</tt>. Both topic and qos must be present in all of the tuples.</dd>
<dt>qos</dt>
<dd>not used.</dd>
</dl>
<p>The function returns a tuple <tt>(result, mid)</tt>, where <tt>result</tt> is <tt>MQTT_ERR_SUCCESS</tt> to indicate success or <tt>(MQTT_ERR_NO_CONN, None)</tt> if the client is not currently connected.  <tt>mid</tt> is the message ID for the subscribe request. The mid value can be used to track the subscribe request by checking against the mid argument in the <tt>on_subscribe()</tt> callback if it is defined.</p>
<p>Raises a <tt>ValueError</tt> if <tt>qos</tt> is not 0, 1 or 2, or if topic is <tt>None</tt> or has zero string length, or if <tt>topic</tt> is not a string, tuple or list.</p>
</div>
<div id="id12">
<h6>Callback</h6>
<p>When the broker has acknowledged the subscription, an <tt>on_subscribe()</tt> callback will be generated.</p>
</div>
</div>
<div id="unsubscribe">
<h5>unsubscribe()</h5>
<pre>unsubscribe(topic)
</pre>
<p>Unsubscribe the client from one or more topics.</p>
<dl>
<dt>topic</dt>
<dd>a single string, or list of strings that are the subscription topics to unsubscribe from.</dd>
</dl>
<p>Returns a tuple <tt>(result, mid)</tt>, where <tt>result</tt> is <tt>MQTT_ERR_SUCCESS</tt>
to indicate success, or <tt>(MQTT_ERR_NO_CONN, None)</tt> if the client is not
currently connected. <tt>mid</tt> is the message ID for the unsubscribe request. The mid value can be used to track the unsubscribe request by checking against the mid
argument in the <tt>on_unsubscribe()</tt> callback if it is defined.</p>
<p>Raises a <tt>ValueError</tt> if <tt>topic</tt> is <tt>None</tt> or has zero string length, or is not a string or list.</p>
<div id="id13">
<h6>Callback</h6>
<p>When the broker has acknowledged the unsubscribe, an <tt>on_unsubscribe()</tt> callback will be generated.</p>
</div>
</div>
</div>
<div id="callbacks">
<h4>Callbacks</h4>
<div id="on-connect">
<h5>on_connect()</h5>
<pre>on_connect(client, userdata, flags, rc)
</pre>
<p>Called when the broker responds to our connection request.</p>
<dl>
<dt>client</dt>
<dd>the client instance for this callback</dd>
<dt>userdata</dt>
<dd>the private user data as set in <tt>Client()</tt> or <tt>userdata_set()</tt></dd>
<dt>flags</dt>
<dd>response flags sent by the broker</dd>
<dt>rc</dt>
<dd>the connection result</dd>
<dt>flags is a dict that contains response flags from the broker:</dt>
<dd><dl>
<dt>flags[‘session present’] - this flag is useful for clients that are</dt>
<dd>using clean session set to 0 only. If a client with clean
session=0, that reconnects to a broker that it has previously
connected to, this flag indicates whether the broker still has the
session information for the client. If 1, the session still exists.</dd>
</dl>
</dd>
</dl>
<p>The value of rc indicates success or not:</p>
<blockquote>
0: Connection successful
1: Connection refused - incorrect protocol version
2: Connection refused - invalid client identifier
3: Connection refused - server unavailable
4: Connection refused - bad username or password
5: Connection refused - not authorised
6-255: Currently unused.</blockquote>
<div id="id14">
<h6>Example</h6>
<pre>def on_connect(client, userdata, flags, rc):
    print("Connection returned result: "+connack_string(rc))

mqttc.on_connect = on_connect
...
</pre>
</div>
</div>
<div id="on-disconnect">
<h5>on_disconnect()</h5>
<pre>on_disconnect(client, userdata, rc)
</pre>
<p>Called when the client disconnects from the broker.</p>
<dl>
<dt>client</dt>
<dd>the client instance for this callback</dd>
<dt>userdata</dt>
<dd>the private user data as set in <tt>Client()</tt> or <tt>userdata_set()</tt></dd>
<dt>rc</dt>
<dd>the disconnection result</dd>
</dl>
<p>The rc parameter indicates the disconnection state. If <tt>MQTT_ERR_SUCCESS</tt> (0), the callback was called in response to a <tt>disconnect()</tt> call. If any other value the disconnection was unexpected, such as might be caused by a network error.</p>
<div id="id15">
<h6>Example</h6>
<pre>def on_disconnect(client, userdata, rc):
    if rc != 0:
        print("Unexpected disconnection.")

mqttc.on_disconnect = on_disconnect
...
</pre>
</div>
</div>
<div id="on-message">
<h5>on_message()</h5>
<pre>on_message(client, userdata, message)
</pre>
<p>Called when a message has been received on a topic that the client subscribes
to. This callback will be called for every message received. Use
<tt>message_callback_add()</tt> to define multiple callbacks that will be called for
specific topic filters.</p>
<dl>
<dt>client</dt>
<dd>the client instance for this callback</dd>
<dt>userdata</dt>
<dd>the private user data as set in <tt>Client()</tt> or <tt>userdata_set()</tt></dd>
<dt>message</dt>
<dd>an instance of MQTTMessage. This is a class with members <tt>topic</tt>, <tt>payload</tt>, <tt>qos</tt>, <tt>retain</tt>.</dd>
</dl>
<div id="id16">
<h6>Example</h6>
<pre>def on_message(client, userdata, message):
    print("Received message '" + str(message.payload) + "' on topic '"
        + message.topic + "' with QoS " + str(message.qos))

mqttc.on_message = on_message
...
</pre>
</div>
</div>
<div id="message-callback-add">
<h5>message_callback_add()</h5>
<p>This function allows you to define callbacks that handle incoming messages for specific subscription filters, including with wildcards. This lets you, for example, subscribe to <tt>sensors/#</tt> and have one callback to handle <tt>sensors/temperature</tt> and another to handle <tt>sensors/humidity</tt>.</p>
<pre>message_callback_add(sub, callback)
</pre>
<dl>
<dt>sub</dt>
<dd>the subscription filter to match against for this callback. Only one callback may be defined per literal sub string</dd>
<dt>callback</dt>
<dd>the callback to be used. Takes the same form as the <tt>on_message</tt> callback.</dd>
</dl>
<p>If using <tt>message_callback_add()</tt> and <tt>on_message</tt>, only messages that do not match a subscription specific filter will be passed to the <tt>on_message</tt> callback.</p>
</div>
<div id="message-callback-remove">
<h5>message_callback_remove()</h5>
<p>Remove a topic/subscription specific callback previously registered using <tt>message_callback_add()</tt>.</p>
<pre>message_callback_remove(sub)
</pre>
<dl>
<dt>sub</dt>
<dd>the subscription filter to remove</dd>
</dl>
</div>
<div id="on-publish">
<h5>on_publish()</h5>
<pre>on_publish(client, userdata, mid)
</pre>
<p>Called when a message that was to be sent using the <tt>publish()</tt> call has completed transmission to the broker. For messages with QoS levels 1 and 2, this means that the appropriate handshakes have completed. For QoS 0, this simply means that the message has left the client. The <tt>mid</tt> variable matches the mid variable returned from the corresponding <tt>publish()</tt> call, to allow outgoing messages to be tracked.</p>
<p>This callback is important because even if the publish() call returns success, it does not always mean that the message has been sent.</p>
</div>
<div id="on-subscribe">
<h5>on_subscribe()</h5>
<pre>on_subscribe(client, userdata, mid, granted_qos)
</pre>
<p>Called when the broker responds to a subscribe request. The <tt>mid</tt> variable matches the mid variable returned from the corresponding <tt>subscribe()</tt> call. The <tt>granted_qos</tt> variable is a list of integers that give the QoS level the broker has granted for each of the different subscription requests.</p>
</div>
<div id="on-unsubscribe">
<h5>on_unsubscribe()</h5>
<pre>on_unsubscribe(client, userdata, mid)
</pre>
<p>Called when the broker responds to an unsubscribe request. The <tt>mid</tt> variable matches the mid variable returned from the corresponding <tt>unsubscribe()</tt> call.</p>
</div>
<div id="on-log">
<h5>on_log()</h5>
<pre>on_log(client, userdata, level, buf)
</pre>
<p>Called when the client has log information. Define to allow debugging. The <tt>level</tt> variable gives the severity of the message and will be one of <tt>MQTT_LOG_INFO</tt>, <tt>MQTT_LOG_NOTICE</tt>, <tt>MQTT_LOG_WARNING</tt>, <tt>MQTT_LOG_ERR</tt>, and <tt>MQTT_LOG_DEBUG</tt>. The message itself is in <tt>buf</tt>.</p>
</div>
</div>
<div id="external-event-loop-support">
<h4>External event loop support</h4>
<div id="loop-read">
<h5>loop_read()</h5>
<pre>loop_read(max_packets=1)
</pre>
<p>Call when the socket is ready for reading. <tt>max_packets</tt> is obsolete and should be left unset.</p>
</div>
<div id="loop-write">
<h5>loop_write()</h5>
<pre>loop_write(max_packets=1)
</pre>
<p>Call when the socket is ready for writing. <tt>max_packets</tt> is obsolete and should be left unset.</p>
</div>
<div id="loop-misc">
<h5>loop_misc()</h5>
<pre>loop_misc()
</pre>
<p>Call every few seconds to handle message retrying and pings.</p>
</div>
<div id="socket">
<h5>socket()</h5>
<pre>socket()
</pre>
<p>Returns the socket object in use in the client to allow interfacing with other event loops.</p>
</div>
<div id="want-write">
<h5>want_write()</h5>
<pre>want_write()
</pre>
<p>Returns true if there is data waiting to be written, to allow interfacing the client with other event loops.</p>
</div>
</div>
<div id="global-helper-functions">
<h4>Global helper functions</h4>
<p>The client module also offers some global helper functions.</p>
<p><tt>topic_matches_sub(sub, topic)</tt> can be used to check whether a <tt>topic</tt> matches a <tt>subscription</tt>.</p>
<p>For example:</p>
<blockquote>
<p>the topic <tt>foo/bar</tt> would match the subscription <tt>foo/#</tt> or <tt>+/bar</tt></p>
<p>the topic <tt>non/matching</tt> would not match the subscription <tt><span class="pre">non/+/+</span></tt></p>
</blockquote>
<p><tt>connack_string(connack_code)</tt> returns the error string associated with a CONNACK result.</p>
<p><tt>error_string(mqtt_errno)</tt> returns the error string associated with a Paho MQTT error number.</p>
</div>
</div>
<div id="id17">
<h3>Publish</h3>
<p>This module provides some helper functions to allow straightforward publishing of messages in a one-shot manner. In other words, they are useful for the situation where you have a single/multiple messages you want to publish to a broker, then disconnect with nothing else required.</p>
<p>The two functions provided are <tt>single()</tt> and <tt>multiple()</tt>.</p>
<div id="single">
<h4>Single</h4>
<p>Publish a single message to a broker, then disconnect cleanly.</p>
<pre>single(topic, payload=None, qos=0, retain=False, hostname="localhost",
    port=1883, client_id="", keepalive=60, will=None, auth=None, tls=None,
    protocol=mqtt.MQTTv311)
</pre>
<div id="function-arguments">
<h5>Function arguments</h5>
<dl>
<dt>topic</dt>
<dd>the only required argument must be the topic string to which the payload will be published.</dd>
<dt>payload</dt>
<dd>the payload to be published. If “” or None, a zero length payload will be published.</dd>
<dt>qos</dt>
<dd>the qos to use when publishing,  default to 0.</dd>
<dt>retain</dt>
<dd>set the message to be retained (True) or not (False).</dd>
<dt>hostname</dt>
<dd>a string containing the address of the broker to connect to. Defaults to localhost.</dd>
<dt>port</dt>
<dd>the port to connect to the broker on. Defaults to 1883.</dd>
<dt>client_id</dt>
<dd>the MQTT client id to use. If “” or None, the Paho library will                 generate a client id automatically.</dd>
<dt>keepalive</dt>
<dd>the keepalive timeout value for the client. Defaults to 60 seconds.</dd>
<dt>will</dt>
<dd><p>a dict containing will parameters for the client:</p>
<p>will = {‘topic’: “&lt;topic&gt;”, ‘payload’:”&lt;payload”&gt;, ‘qos’:&lt;qos&gt;, ‘retain’:&lt;retain&gt;}.</p>
<p>Topic is required, all other parameters are optional and will default to None, 0 and False respectively.</p>
<p>Defaults to None, which indicates no will should be used.</p>
</dd>
<dt>auth</dt>
<dd><p>a dict containing authentication parameters for the client:</p>
<p>auth = {‘username’:”&lt;username&gt;”, ‘password’:”&lt;password&gt;”}</p>
<p>Username is required, password is optional and will default to None if not provided.</p>
<p>Defaults to None, which indicates no authentication is to be used.</p>
</dd>
<dt>tls</dt>
<dd><p>a dict containing TLS configuration parameters for the client:</p>
<p>dict = {‘ca_certs’:”&lt;ca_certs&gt;”, ‘certfile’:”&lt;certfile&gt;”, ‘keyfile’:”&lt;keyfile&gt;”, ‘tls_version’:”&lt;tls_version&gt;”, ‘ciphers’:”&lt;ciphers”&gt;}</p>
<p>ca_certs is required, all other parameters are optional and will default to None if not provided, which results in the client using the default behaviour - see the paho.mqtt.client documentation.</p>
<p>Defaults to None, which indicates that TLS should not be used.</p>
</dd>
<dt>protocol</dt>
<dd>choose the version of the MQTT protocol to use. Use either <tt>MQTTv31</tt> or <tt>MQTTv311</tt>.</dd>
</dl>
</div>
<div id="id18">
<h5>Example</h5>
<pre>import paho.mqtt.publish as publish

publish.single("paho/test/single", "payload", hostname="iot.eclipse.org")
</pre>
</div>
</div>
<div id="multiple">
<h4>Multiple</h4>
<p>Publish multiple messages to a broker, then disconnect cleanly.</p>
<pre>multiple(msgs, hostname="localhost", port=1883, client_id="", keepalive=60,
    will=None, auth=None, tls=None, protocol=mqtt.MQTTv311)
</pre>
<div id="id19">
<h5>Function arguments</h5>
<dl>
<dt>msgs</dt>
<dd><p>a list of messages to publish. Each message is either a dict or a tuple.</p>
<p>If a dict, only the topic must be present. Default values will be
used for any missing arguments. The dict must be of the form:</p>
<p>msg = {‘topic’:”&lt;topic&gt;”, ‘payload’:”&lt;payload&gt;”, ‘qos’:&lt;qos&gt;, ‘retain’:&lt;retain&gt;}</p>
<p>topic must be present and may not be empty.
If payload is “”, None or not present then a zero length payload will be published. If qos is not present, the default of 0 is used. If retain is not present, the default of False is used.</p>
<p>If a tuple, then it must be of the form:</p>
<p>(“&lt;topic&gt;”, “&lt;payload&gt;”, qos, retain)</p>
</dd>
</dl>
<p>See <tt>single()</tt> for the description of <tt>hostname</tt>, <tt>port</tt>, <tt>client_id</tt>, <tt>keepalive</tt>, <tt>will</tt>, <tt>auth</tt>, <tt>tls</tt>, <tt>protocol</tt>.</p>
</div>
<div id="id20">
<h5>Example</h5>
<pre>import paho.mqtt.publish as publish

msgs = [{'topic':"paho/test/multiple", 'payload':"multiple 1"},
    ("paho/test/multiple", "multiple 2", 0, False)]
publish.multiple(msgs, hostname="iot.eclipse.org")
</pre>
</div>
</div>
</div>
</div>
<div id="reporting-bugs">
<h2>Reporting bugs</h2>
<p>Please report bugs under the “MQTT-Python” Component in <a href="http://bugs.eclipse.org/bugs/" rel="nofollow">Eclipse Bugzilla</a> for the Paho Technology project.</p>
</div>
<div id="more-information">
<h2>More information</h2>
<p>Discussion of the Paho clients takes place on the <a href="https://dev.eclipse.org/mailman/listinfo/paho-dev" rel="nofollow">Eclipse paho-dev mailing list</a>.</p>
<p>General questions about the MQTT protocol are discussed in the <a href="https://groups.google.com/forum/?fromgroups#!forum/mqtt" rel="nofollow">MQTT Google Group</a>.</p>
<p>There is much more information available via the <a href="http://mqtt.org/" rel="nofollow">MQTT community site</a>.</p>
</div>


<a name="downloads">&nbsp;</a>
<table class="list" style="margin-bottom: 10px;">
<tbody><tr>
  <th>File</th>
  <th>Type</th>
  <th>Py Version</th>
  <th>Uploaded on</th>
  <th style="text-align: right;">Size</th>
</tr>

<tr class="odd">

    <td>
    <span style="white-space: nowrap;">
      <a href="https://pypi.python.org/packages/83/96/dacc2b78bc9c5cd83eed178e9ce35d7bceecf2dd38db079c0190423efd4a/paho-mqtt-1.1.tar.gz#md5=a6407b74eb5e5411e157be1de5c11366">paho-mqtt-1.1.tar.gz</a>
      (<a title="MD5 Digest" href="https://pypi.python.org/pypi?:action=show_md5&amp;digest=a6407b74eb5e5411e157be1de5c11366">md5</a>)
    </span>
    
        </td>
  <td style="white-space: nowrap;">
    Source
  </td>
  <td>
    
  </td>
  <td>2015-02-01</td>
  <td style="text-align: right;">40KB</td>

</tr>

<tr><td id="last" colspan="6"></td></tr>
  </tbody></table>



<ul class="nodot">
 <li>
  <strong>Author:</strong>
  <span>Roger Light</span>
 </li>

 

 

<!-- The <th> elements below are a terrible terrible hack for setuptools -->
 <li>
  <strong>Home Page:</strong>
  <!-- <th>Home Page -->
  <a href="http://eclipse.org/paho">http://eclipse.org/paho</a>
 </li>


 <li>
  <strong>Bug Tracker:</strong>
  <a href="https://github.com/eclipse/paho.mqtt.python">https://github.com/eclipse/paho.mqtt.python</a>
 </li>

 


 

 <li>
  <strong>License:</strong>
  
  
  <span>Eclipse Public License v1.0 / Eclipse Distribution License v1.0</span>
  
 </li>

 

<!-- TODO: add link to products in follow dependencies... -->
 
 
 

 <li>
  <strong>Categories</strong>
  <ul class="nodot">
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=4">Development Status :: 4 - Beta</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=30">Intended Audience :: Developers</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=54">License :: OSI Approved</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=147">Operating System :: MacOS :: MacOS X</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=150">Operating System :: Microsoft :: Windows</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=160">Operating System :: POSIX</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=214">Programming Language :: Python</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=531">Programming Language :: Python :: 2.6</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=532">Programming Language :: Python :: 2.7</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=533">Programming Language :: Python :: 3</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=230">Topic :: Communications</a>
   </li>
   <li>
    <a href="https://pypi.python.org/pypi?:action=browse&amp;c=319">Topic :: Internet</a>
   </li>
  </ul>
 </li>



 

 

 

 

 


 <li>
  <strong>Package Index Owner:</strong>
  <span>Roger.Light</span>
 </li>

 <li>
  <strong>Package Index Maintainer:</strong>
  <span>PierreF</span>
 </li>

 <li>
  <strong><a href="https://github.com/edumbill/doap/wiki">DOAP</a> record:</strong>
  <a href="https://pypi.python.org/pypi?:action=doap&amp;name=paho-mqtt&amp;version=1.1">paho-mqtt-1.1.xml</a>
 </li>

</ul>





            </div>


          </div>
          <div id="footer">
            <div id="credits">
              <div style="float: left; margin-right: 1em;" id="badges">
                
                <img src="./paho-mqtt 1.1 _ Python Package Index_files/ipv6-go!-green.svg" alt="ipv6 ready" title="ipv6 ready" border="0"><br>
                <img src="./paho-mqtt 1.1 _ Python Package Index_files/http2-go!-green.svg" alt="http2 ready" title="http2 ready" border="0"><br>
                
                <img src="./paho-mqtt 1.1 _ Python Package Index_files/PythonPoweredAnimSmall.gif" alt="darn right it is" title="Python Powered" border="0">
              </div>
              <div style="float: right" id="donations">
                <a href="http://www.python.org/about/website">Website maintained by the Python community</a><br>
                <a href="https://www.fastly.com/" title="Real-time CDN services provided by Fastly">Real-time CDN by Fastly</a> /
                <a href="http://developer.rackspace.com/" title="Server hosting by Rackspace Open Source support">Hosting by Rackspace</a><br>
                <a href="https://aws.amazon.com/s3/" title="Object storage provided by Amazon S3">Object storage by Amazon S3</a> /
                <a href="http://www.timparkin.co.uk/" title="Design by Tim Parkin, Yorkshire man, photographer and developer">Design by Tim Parkin</a>
              </div>
            </div>
            Copyright © 1990-2017, <a href="http://www.python.org/psf">Python Software Foundation</a><br>
            <a href="https://pypi.org/policy/terms-of-use/">Terms of Use</a>
          </div>
        </div>
      </div>

      
      <script type="text/javascript" async="" src="./paho-mqtt 1.1 _ Python Package Index_files/linkid.js"></script><script async="" src="./paho-mqtt 1.1 _ Python Package Index_files/analytics.js"></script><script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-55961911-1', 'auto');
        ga('require', 'linkid', 'linkid.js');
        ga('send', 'pageview');
      </script>
      

      <script type="text/javascript" src="./paho-mqtt 1.1 _ Python Package Index_files/se-v2.js">
      </script>
      <script type="text/javascript">
        var sp = new StatusPage.page({ page : '2p66nmmycsj3' });
        sp.summary({
          // <![CDATA[
          success: function(data) {
            var div = document.getElementById('statusdiv');
            var reports = "</br><h4 id='statusbox'>Status</h4>\n";
            var outage = 0;
            var maintenance = 0;
            for (i in data.incidents) {
              var incident = data.incidents[i];
              var message, status = incident.status;
              if (status === 'scheduled') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status === 'in_progress') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                reports += message;
                outage += 1;
              }
            }
            for (i in data.scheduled_maintenances) {
              var incident = data.scheduled_maintenances[i];
              var message, status = incident.status;
              if (status === 'scheduled') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status === 'in_progress') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                reports += message;
                outage += 1;
              }
            }
            if (outage + maintenance === 0) {
              reports += "<li><a href='http://status.python.org'>Nothing to report</a></li>";
            }
            div.innerHTML=reports;
            if (outage > 0) {
              var statusbox = document.getElementById("statusbox");
              statusbox.style.background = '#FC234A';
            }
          }
          // ]]>
        });
      </script>

    
  

</body></html>